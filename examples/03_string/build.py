import argparse
import subprocess
from pathlib import Path
import shutil

# parse args
parser = argparse.ArgumentParser(
    description="script to speed up build process")

parser.add_argument('-c', action='store', dest='cFile',
                    help='C file to be compiled', type=str)
parser.add_argument('-e', action='store', dest='exportedFuncs',
                    help='Exported functions from the c file', type=str)

args = parser.parse_args()

# compile c
print(args.cFile)
cFilePath = Path(args.cFile)
outputJsFile = cFilePath.stem + '.js'
emccArgs = ['emcc',  '-o', outputJsFile, args.cFile, '-s', 'EXPORTED_FUNCTIONS=' +
            args.exportedFuncs, '-s', 'EXPORTED_RUNTIME_METHODS=' + '[\"ccall\",\"cwrap\"]']
# emccArgs = ['emcc',  '-o', outputJsFile, args.cFile, '-s', 'EXPORT_ALL=1', '-s', 'EXPORTED_RUNTIME_METHODS=' + '[\"ccall\",\"cwrap\"]']
print(*emccArgs)
compileFile = subprocess.run(emccArgs)

# execute wasabi to
wasmFile = cFilePath.stem + '.wasm'
wasabiArgs = ['wasabi', wasmFile]
print(*wasabiArgs)
wasabi = subprocess.run(['wasabi', wasmFile])

# replace the original wasm file with the instrumented one (generated by wasabi)
# get path to the ./out directory
instrumentedWasmFile = Path('.') / 'out' / (cFilePath.stem + '.wasm')
dstWasmFile = Path('.') / (cFilePath.stem + '.wasm')
shutil.move(src=str(instrumentedWasmFile), dst=str(dstWasmFile.absolute()))

instrumentedJsFile= Path('.') / 'out' / (cFilePath.stem + '.wasabi.js')
dstJsFile = Path('.') / (cFilePath.stem + '.wasabi.js')
shutil.move(src=str(instrumentedJsFile), dst=dstJsFile)
